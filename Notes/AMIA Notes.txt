Criteria can have relationships. for example instead of just having must have this and must have done this before that instead we can make criterions objects which have relationships with each other. for example a criterion can have a relationship with another criterion that it must be done before that criterion.
so you could have list of prerequisites for each criterion. you could have date range be another property. and so on. and a clinical trial will be one of these objects. so these criteria objects just hold other criteria objects and recursively evaluate. we can also easily create the boolean equation from said object tree.
Evaluating one criterion at a time looks like it will be more efficient. criterions were often not seperated enough, but we can make a constructor that takes in text and parses it into a list of subcriterions which each will go through their own subcriterion parsing. then once the text represents one criterion and its relationships then it can be actually turned into the full criterion object. hence ending up as a tree of criteria objects which can then turn into the boolean equation. we can have another property that defines what the key information it is testing, aka the subject of the criterion. this way we can easily match the criterion against the EHR data. for example if its asking wether or not the age is above 18, the key information would be the age. this would allow us to easily match the criterion against the EHR data by having a dictionary of key information to EHR field.

by inserting one criterion at a time we can also use the leveinshtein or edit distance along with the cosine similarity (use biobert or some other model for the embeddings) to match iteratively. when we did it before in parallel it would be very difficult to see which should match to which. now it would first try to match with an EHR field. if not then it will try to match previous criterions which weren't matched with EHR fields. if it doesn't match any then it will become its own. 

Often times we won't have all of the data from the EHRs. that is where we can start inteviewing the user. but even then the user might not know the answer. so that is where we have to start approximating. what we can do is substite both true and false for the criterion and simplify to see if either answer disqualifies the user. each time it could disqualify the probability that they qualify gets cut in half. this is a very rudimentary version and can be improved upon via machine learning to see how likely it is that the patient has the disqualifying criteria.


prompts were way too narrow. needs to be more general because there are lots and lots of edge cases I just haven't seen. can't be too specific.

the yes no version of criterions is nice for internship style but not for EHR data. how much do we care about cost and speed? if we don't then we can always just ask an llm wether the data in that certain EHR field matches the criteria. this would end up being kinda slow and costly. 
or we could do a similar approach to the other guy and have the llm make some code that when given the ehr data will evalute the criteria. this would be faster (take longer at first but not what the patient sees) and cheaper as it is less calls (one per criterion instead of one per criterion per patient).
for example if we have a criterion that says the age must be above 18 then we can have a function that takes in the numerical ehr data and returns true or false. this would be much faster than having to call the llm each time. problem with that is dealing with invalid ehr data. at which point we could then defer to a "manual" (llm) check. 



there are different ways we can take this. improving the representation to a more accurate one that maintains the relationships between the criteria, or improving the matching between key terms, or making the evaluation of the criteria via ehr (which would greatly need the matching to be better as it is currently nonexistent)



watch out for interogation fatigue. can tune how accurate/long want to be. detect response length and intent to keep on going.