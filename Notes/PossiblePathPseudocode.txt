treeIfy(string text, Node node):
    llm call with entire text. llm should return list of strings that are the subgroups of the text that does not need any other context to answer it, only go one level down at a time. (for example if we have a must have a before b, it would stop there instead of going down to the a,b level because they need the context of each other)
    save it as result
    if result is empty return
    otherwise for every string str result:
        add str as a child of node
        treeIfy(str)
postCondition: node is a tree of the text where children are subgroups of the text that does not need any other context to determine its truth value.
idea is that these groups should end up roughly being each line or bullet point while still being nested and keeping into account that some bullet points are dependent on each other.

identifyTopics(Node node):
    llm call that then identifies the subjects/topics of the text in the node. returns a list of strings that are the topics of the text.
    
structurize:
    could preprocess with llm call that looks at notes and if it deems the note to not talk about a criterion then remove it
    for every trial:
        treeIfy(trial, node)
        for every leaf l in node:
            mark l as atomic
            add result of identifyTopics(l) as a child to l:

topicToEHRMatch(Node node):
    for every leaf l in node (these will be the individual topics):
        if t is in EHRM:
            mark l as matching to EHRM.
            memoize it for other nodes
        else:
            add l to list of unknowns
            memoize it for other nodes

scrapeAvailableData(Node tree, EHR data):
    for every atomic node l in tree:
        for every topic t in l:
            if t is in EHRM:
                add the data from EHRM to l in dictionary type format
        if list of unknowns is empty: //can pre determine without interview
            llm call with l and dictionary of topics and their ehr data, should return either a boolean or a string. boolean if the data is enough to determine the truth value of the leaf, string if it needs more data.
            if it returned a string then add that to the unknowns list

evaluateTruth(Node node):
    if node has not yet been evaluated:
        if node is atomic:
            if any topic in node is not yet known:
                return unable to evaluate
            else:
                llm call with node and the data from EHRM. should return a boolean value or string if it needs more data. at which point you add to list of unknowns and return unable to evaluate
        else for every child in node:
            if child has not yet been evaluated:
                evaluateTruth(child)
        if any child was not able to be evaluated:
            return unable to evaluate
        else:
            llm call where we pass in the node and the results of all the children. should return a boolean value.
somewhere along here needs to remove topics/nodes from depth heap if they have been found to be false or true. 

identifyDepthsOfTopics(Node node):
    returns a dictionary of topics and their depth in the tree. useful to reduce time complexity when looking for next question to ask.

interview(EHR data, forest trials):
    for every trial in trials:
        scrapeAvailableData(trial, EHR data)
        if ehr was able to evaluate truthfulness then remove from list of unknown trials
    findNextQuestion(unknown trials)

initializeDepths(forest trials):
    make min heap of topic/node: average(or some other function) depth
    for every trial in trials:
        identifyDepthsOfTopics(trial)
        include the depths to the heap of all depths 
        

findNextQuestion(unknown trials):
    return heap of depths.pop()
        
        
'''
        
                
            