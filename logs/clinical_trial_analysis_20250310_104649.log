2025-03-10 10:46:49 - root - INFO - Logging to file: logs\clinical_trial_analysis_20250310_104649.log
2025-03-10 10:46:49 - __main__ - INFO - Application started...
2025-03-10 10:46:50 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1
2025-03-10 10:46:50 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 10:46:50 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1 HTTP/11" 200 None
2025-03-10 10:46:50 - src.utils.helpers - INFO - Request successful.
2025-03-10 10:46:50 - __main__ - INFO - Processing trial 1: NCT ID NCT00003082
2025-03-10 10:46:50 - src.services.trial_manager - INFO - Starting processing for trial NCT ID: NCT00003082
2025-03-10 10:46:50 - src.services.trial_manager - INFO - Fetching trial data for NCT ID: NCT00003082
2025-03-10 10:46:50 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies/NCT00003082?fields=NCTId,OfficialTitle,EligibilityModule
2025-03-10 10:46:50 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 10:46:50 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies/NCT00003082?fields=NCTId,OfficialTitle,EligibilityModule HTTP/11" 200 None
2025-03-10 10:46:50 - src.utils.helpers - INFO - Request successful.
2025-03-10 10:46:50 - src.services.trial_manager - INFO - Successfully retrieved trial data.
2025-03-10 10:46:50 - src.services.trial_manager - DEBUG - Fully raw input: {'protocolSection': {'identificationModule': {'nctId': 'NCT00003082', 'officialTitle': 'A Phase IA Trial of Combined Murine IgG Monoclonal Anti-Transferrin Receptor Antibodies E2.3 and A27.15 in Cancer Patients'}, 'eligibilityModule': {'eligibilityCriteria': 'DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease\n\nPATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies\n\nPRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified', 'healthyVolunteers': False, 'sex': 'ALL', 'minimumAge': '18 Years', 'stdAges': ['ADULT', 'OLDER_ADULT']}}}
2025-03-10 10:46:50 - src.services.trial_manager - DEBUG - Trial data: nct_id='NCT00003082' official_title='A Phase IA Trial of Combined Murine IgG Monoclonal Anti-Transferrin Receptor Antibodies E2.3 and A27.15 in Cancer Patients' inclusion_criteria='Healthy volunteers allowed\nMust have minimum age of 18 Years' exclusion_criteria='' miscellaneous_criteria='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease\n\nPATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies\n\nPRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified'
2025-03-10 10:46:50 - src.services.identifier - INFO - Starting identification of criteria for trial NCT ID: NCT00003082
2025-03-10 10:46:51 - src.services.identifier - DEBUG - Processing line 1: Healthy volunteers allowed
2025-03-10 10:46:51 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Healthy volunteers allowed
2025-03-10 10:46:51 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x000001BDF8ACA660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Healthy volunteers allowed'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 10:46:51 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:46:51 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-10 10:46:51 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8ACD940>
2025-03-10 10:46:51 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BDF84BAC30> server_hostname='api.openai.com' timeout=5.0
2025-03-10 10:46:51 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8AC47D0>
2025-03-10 10:46:51 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:46:51 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:46:51 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:46:51 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:46:51 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:46:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1041'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449850'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'19ms'), (b'x-request-id', b'req_e48acf1f7b83b3a202ede26439401cca'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=VWEo7JP8zL2OGaO.RWrCmF9OjCgFD3UX_v5N6Frfbs8-1741618014-1.0.1.1-6OBheSmYcRRU3gTPlkGAP.jzyfVtxjFmeFoWyyf8aem2bi.l89NV8KI1TVNP0re8JMjhrWTlSmcowlw_eEwFfU9wwpqlfhck4eQ3elNXXvg; path=/; expires=Mon, 10-Mar-25 15:16:54 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=SG0adWbVaxHMzlrQgDEOsDrfQEAMJH1UuR9jYDNIumk-1741618014776-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39aa918eca4bb-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:46:52 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:46:52 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 10 Mar 2025 14:46:54 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'eschrichlab'), ('openai-processing-ms', '1041'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '450000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '449850'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '19ms'), ('x-request-id', 'req_e48acf1f7b83b3a202ede26439401cca'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=VWEo7JP8zL2OGaO.RWrCmF9OjCgFD3UX_v5N6Frfbs8-1741618014-1.0.1.1-6OBheSmYcRRU3gTPlkGAP.jzyfVtxjFmeFoWyyf8aem2bi.l89NV8KI1TVNP0re8JMjhrWTlSmcowlw_eEwFfU9wwpqlfhck4eQ3elNXXvg; path=/; expires=Mon, 10-Mar-25 15:16:54 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=SG0adWbVaxHMzlrQgDEOsDrfQEAMJH1UuR9jYDNIumk-1741618014776-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '91e39aa918eca4bb-MIA'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-03-10 10:46:52 - openai._base_client - DEBUG - request_id: req_e48acf1f7b83b3a202ede26439401cca
2025-03-10 10:46:52 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Healthy volunteers allowed
2025-03-10 10:46:52 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 10:46:52 - src.services.identifier - DEBUG - Processing line 2: Must have minimum age of 18 Years
2025-03-10 10:46:52 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Must have minimum age of 18 Years
2025-03-10 10:46:52 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x000001BDF8ACA660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Must have minimum age of 18 Years'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 10:46:52 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:46:52 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:46:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1527'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449849'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'20ms'), (b'x-request-id', b'req_014b61e3be1b99216ca8079aeeedc235'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39ab0cba5a4bb-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:46:54 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:46:54 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:46:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1527', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449849', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '20ms', 'x-request-id': 'req_014b61e3be1b99216ca8079aeeedc235', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39ab0cba5a4bb-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:46:54 - openai._base_client - DEBUG - request_id: req_014b61e3be1b99216ca8079aeeedc235
2025-03-10 10:46:54 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Must have minimum age of 18 Years
2025-03-10 10:46:54 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 10:46:54 - src.services.identifier - DEBUG - Processing line 1: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 10:46:54 - src.services.identifier - DEBUG - Extracting atomic criteria from line: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 10:46:54 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x000001BDF8047F60>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 10:46:54 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:46:54 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:46:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'3277'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449804'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'26ms'), (b'x-request-id', b'req_5413bbd36cf18c6ec5e8f2b8a7196cd8'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39abb38b8a4bb-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:46:57 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:46:57 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:46:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '3277', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449804', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '26ms', 'x-request-id': 'req_5413bbd36cf18c6ec5e8f2b8a7196cd8', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39abb38b8a4bb-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:46:57 - openai._base_client - DEBUG - request_id: req_5413bbd36cf18c6ec5e8f2b8a7196cd8
2025-03-10 10:46:57 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 10:46:57 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 10:46:57 - src.services.identifier - DEBUG - Processing line 2: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 10:46:57 - src.services.identifier - DEBUG - Extracting atomic criteria from line: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 10:46:57 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x000001BDF80700E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 10:46:57 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:46:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:47:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'16686'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449636'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'48ms'), (b'x-request-id', b'req_63332749e91ee2bd901af16ea0c2251f'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39ad0ab0aa4bb-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:47:14 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:47:14 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:47:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '16686', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449636', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '48ms', 'x-request-id': 'req_63332749e91ee2bd901af16ea0c2251f', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39ad0ab0aa4bb-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:47:14 - openai._base_client - DEBUG - request_id: req_63332749e91ee2bd901af16ea0c2251f
2025-03-10 10:47:14 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 10:47:14 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 10:47:14 - src.services.identifier - DEBUG - Processing line 3: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 10:47:14 - src.services.identifier - DEBUG - Extracting atomic criteria from line: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 10:47:14 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x000001BDF80700E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 10:47:14 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:47:14 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:47:27 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'10197'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'448999'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'133ms'), (b'x-request-id', b'req_0d192fb047e7af04a19319c0425933f1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39b39ca57a4bb-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:47:24 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:47:24 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:47:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '10197', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '448999', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '133ms', 'x-request-id': 'req_0d192fb047e7af04a19319c0425933f1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39b39ca57a4bb-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:47:24 - openai._base_client - DEBUG - request_id: req_0d192fb047e7af04a19319c0425933f1
2025-03-10 10:47:24 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 10:47:24 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 10:47:24 - src.services.identifier - INFO - Successfully identified criteria for trial NCT ID: NCT00003082
2025-03-10 10:47:24 - src.repositories.trial_repository - INFO - Model saved successfully at C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\output\allTrials\identified\NCT00003082_identified.json
2025-03-10 10:47:24 - src.services.logical_structurizer - INFO - Starting logical structurizing for trial NCT ID: NCT00003082
2025-03-10 10:47:24 - src.services.logical_structurizer - DEBUG - Processing 2 inclusion criteria lines
2025-03-10 10:47:24 - src.services.logical_structurizer - DEBUG - Structurizing line: line='Healthy volunteers allowed' criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 10:47:24 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:47:24 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-10 10:47:24 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8AC51D0>
2025-03-10 10:47:24 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BDF84BA690> server_hostname='api.openai.com' timeout=5.0
2025-03-10 10:47:24 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF89EF820>
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:47:24 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:47:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1376'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449837'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'21ms'), (b'x-request-id', b'req_dfb3f97cc109019a228776264d456f63'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=DKPTmXN.6DqxJalfJ4d8o_V0eBySR7pXtkbjYK6k0Vk-1741618048-1.0.1.1-nxhh0p8QYJVaGcoWQRkePO0D3VKlELtZOqb7j7mSg2.JkWG_bL2cxem3.daiZc3Xemj07lMFWjexfYTtCKSGUGZig28Tk9GFvurr6uRhqs4; path=/; expires=Mon, 10-Mar-25 15:17:28 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=cw9XOryjBKMLm7aZmrDk40GOP9IDApSpw2kXOxzpzjM-1741618048757-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39b7b69424bff-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:47:26 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:47:26 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 10 Mar 2025 14:47:28 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'eschrichlab'), ('openai-processing-ms', '1376'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '450000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '449837'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '21ms'), ('x-request-id', 'req_dfb3f97cc109019a228776264d456f63'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=DKPTmXN.6DqxJalfJ4d8o_V0eBySR7pXtkbjYK6k0Vk-1741618048-1.0.1.1-nxhh0p8QYJVaGcoWQRkePO0D3VKlELtZOqb7j7mSg2.JkWG_bL2cxem3.daiZc3Xemj07lMFWjexfYTtCKSGUGZig28Tk9GFvurr6uRhqs4; path=/; expires=Mon, 10-Mar-25 15:17:28 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=cw9XOryjBKMLm7aZmrDk40GOP9IDApSpw2kXOxzpzjM-1741618048757-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '91e39b7b69424bff-MIA'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-03-10 10:47:26 - openai._base_client - DEBUG - request_id: req_dfb3f97cc109019a228776264d456f63
2025-03-10 10:47:26 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='Healthy volunteers allowed' criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 10:47:26 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))])
2025-03-10 10:47:26 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='Healthy volunteers allowed', criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]) logical_structure=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))])
2025-03-10 10:47:26 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 10:47:26 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 10:47:26 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 10:47:26 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 10:47:26 - src.services.logical_structurizer - DEBUG - Structurizing line: line='Must have minimum age of 18 Years' criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 10:47:26 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:47:26 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:47:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1929'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449096'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'120ms'), (b'x-request-id', b'req_915e4929c4216d727a1dfad5b2a6cb20'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39b852b954bff-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:47:28 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:47:28 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:47:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1929', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449096', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '120ms', 'x-request-id': 'req_915e4929c4216d727a1dfad5b2a6cb20', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39b852b954bff-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:47:28 - openai._base_client - DEBUG - request_id: req_915e4929c4216d727a1dfad5b2a6cb20
2025-03-10 10:47:28 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='Must have minimum age of 18 Years' criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 10:47:28 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))])
2025-03-10 10:47:28 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='Must have minimum age of 18 Years', criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]) logical_structure=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))])
2025-03-10 10:47:28 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 10:47:28 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 10:47:28 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 10:47:28 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 10:47:28 - src.services.logical_structurizer - DEBUG - Processing 0 exclusion criteria lines
2025-03-10 10:47:28 - src.services.logical_structurizer - DEBUG - Processing 3 miscellaneous criteria lines
2025-03-10 10:47:28 - src.services.logical_structurizer - DEBUG - Structurizing line: line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease' criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]
2025-03-10 10:47:28 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:47:28 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 14:47:37 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'6039'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'448953'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'139ms'), (b'x-request-id', b'req_37cf66b16fdd53a446ecab318ef909b8'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e39b923a584bff-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 10:47:34 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:47:34 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 14:47:37 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '6039', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '448953', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '139ms', 'x-request-id': 'req_37cf66b16fdd53a446ecab318ef909b8', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e39b923a584bff-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 10:47:34 - openai._base_client - DEBUG - request_id: req_37cf66b16fdd53a446ecab318ef909b8
2025-03-10 10:47:34 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease' criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]
2025-03-10 10:47:34 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))])])
2025-03-10 10:47:34 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease', criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]) logical_structure=LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))])])
2025-03-10 10:47:34 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]
2025-03-10 10:47:34 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy following known standard effective therapy', criterion='refractory or recurrent advanced malignancy', requirement=Requirement(requirement_type='treatment history', expected_value='following known standard effective therapy')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable'])), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='treatment availability', expected_value='no standard effective therapy exists')), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='measurability', expected_value=['measurable', 'evaluable']))]
2025-03-10 10:47:34 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 10:47:34 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 10:47:34 - src.services.logical_structurizer - DEBUG - Structurizing line: line='PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies' criterions=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum age', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value='SWOG 0-2')), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum duration', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum count', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum level', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum count', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin level', requirement=Requirement(requirement_type='maximum level', expected_value='1.5 times normal')), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin level', requirement=Requirement(requirement_type='maximum level if due to disease', expected_value='3.5 times normal')), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases level', requirement=Requirement(requirement_type='maximum level', expected_value='3 times ULN')), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases level', requirement=Requirement(requirement_type='maximum level if due to liver metastases', expected_value='5 times ULN')), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine level', requirement=Requirement(requirement_type='maximum level', expected_value='2.5 times normal')), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing status', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement for fertile female patients', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]
2025-03-10 10:47:34 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:47:34 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 10:57:34 - httpcore.http11 - DEBUG - receive_response_headers.failed exception=ReadTimeout(TimeoutError('The read operation timed out'))
2025-03-10 10:57:34 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 10:57:34 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 10:57:34 - openai._base_client - DEBUG - Encountered httpx.TimeoutException
Traceback (most recent call last):
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
        pool_request.request
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 136, in handle_request
    raise exc
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 106, in handle_request
    ) = self._receive_response_headers(**kwargs)
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 177, in _receive_response_headers
    event = self._receive_event(timeout=timeout)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 217, in _receive_event
    data = self._network_stream.read(
        self.READ_NUM_BYTES, timeout=timeout
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 126, in read
    with map_exceptions(exc_map):
         ~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ReadTimeout: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\openai\_base_client.py", line 993, in _request
    response = self._client.send(
        request,
        stream=stream or self._should_stream_response_body(request=request),
        **kwargs,
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
        request,
    ...<2 lines>...
        history=[],
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
        request,
        follow_redirects=follow_redirects,
        history=history,
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ReadTimeout: The read operation timed out
2025-03-10 10:57:34 - openai._base_client - DEBUG - 2 retries left
2025-03-10 10:57:34 - openai._base_client - INFO - Retrying request to /chat/completions in 0.462095 seconds
2025-03-10 10:57:35 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 10:57:35 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-10 10:57:35 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8EE42B0>
2025-03-10 10:57:35 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BDF84BA690> server_hostname='api.openai.com' timeout=5.0
2025-03-10 10:57:35 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8A87770>
2025-03-10 10:57:35 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 10:57:35 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 10:57:35 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 10:57:35 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 10:57:35 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:07:35 - httpcore.http11 - DEBUG - receive_response_headers.failed exception=ReadTimeout(TimeoutError('The read operation timed out'))
2025-03-10 11:07:35 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:07:35 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:07:35 - openai._base_client - DEBUG - Encountered httpx.TimeoutException
Traceback (most recent call last):
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
        pool_request.request
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 103, in handle_request
    return self._connection.handle_request(request)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 136, in handle_request
    raise exc
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 106, in handle_request
    ) = self._receive_response_headers(**kwargs)
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 177, in _receive_response_headers
    event = self._receive_event(timeout=timeout)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_sync\http11.py", line 217, in _receive_event
    data = self._network_stream.read(
        self.READ_NUM_BYTES, timeout=timeout
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 126, in read
    with map_exceptions(exc_map):
         ~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ReadTimeout: The read operation timed out

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\openai\_base_client.py", line 993, in _request
    response = self._client.send(
        request,
        stream=stream or self._should_stream_response_body(request=request),
        **kwargs,
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
        request,
    ...<2 lines>...
        history=[],
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
        request,
        follow_redirects=follow_redirects,
        history=history,
    )
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Program Files\Python313\Lib\contextlib.py", line 162, in __exit__
    self.gen.throw(value)
    ~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ReadTimeout: The read operation timed out
2025-03-10 11:07:35 - openai._base_client - DEBUG - 1 retry left
2025-03-10 11:07:35 - openai._base_client - INFO - Retrying request to /chat/completions in 0.753652 seconds
2025-03-10 11:07:36 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:07:36 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-10 11:07:36 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8D22F10>
2025-03-10 11:07:36 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001BDF84BA690> server_hostname='api.openai.com' timeout=5.0
2025-03-10 11:07:36 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001BDF8D22CF0>
2025-03-10 11:07:36 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:07:36 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:07:36 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:07:36 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:07:36 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
