2025-03-10 11:08:22 - root - INFO - Logging to file: logs\clinical_trial_analysis_20250310_110822.log
2025-03-10 11:08:22 - __main__ - INFO - Application started...
2025-03-10 11:08:24 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1
2025-03-10 11:08:24 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 11:08:25 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1 HTTP/11" 200 None
2025-03-10 11:08:25 - src.utils.helpers - INFO - Request successful.
2025-03-10 11:08:25 - __main__ - INFO - Processing trial 1: NCT ID NCT00003082
2025-03-10 11:08:25 - src.services.trial_manager - INFO - Starting processing for trial NCT ID: NCT00003082
2025-03-10 11:08:25 - src.services.trial_manager - INFO - Fetching trial data for NCT ID: NCT00003082
2025-03-10 11:08:25 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies/NCT00003082?fields=NCTId,OfficialTitle,EligibilityModule
2025-03-10 11:08:25 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 11:08:25 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies/NCT00003082?fields=NCTId,OfficialTitle,EligibilityModule HTTP/11" 200 None
2025-03-10 11:08:25 - src.utils.helpers - INFO - Request successful.
2025-03-10 11:08:25 - src.services.trial_manager - INFO - Successfully retrieved trial data.
2025-03-10 11:08:25 - src.services.trial_manager - DEBUG - Fully raw input: {'protocolSection': {'identificationModule': {'nctId': 'NCT00003082', 'officialTitle': 'A Phase IA Trial of Combined Murine IgG Monoclonal Anti-Transferrin Receptor Antibodies E2.3 and A27.15 in Cancer Patients'}, 'eligibilityModule': {'eligibilityCriteria': 'DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease\n\nPATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies\n\nPRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified', 'healthyVolunteers': False, 'sex': 'ALL', 'minimumAge': '18 Years', 'stdAges': ['ADULT', 'OLDER_ADULT']}}}
2025-03-10 11:08:25 - src.services.trial_manager - DEBUG - Trial data: nct_id='NCT00003082' official_title='A Phase IA Trial of Combined Murine IgG Monoclonal Anti-Transferrin Receptor Antibodies E2.3 and A27.15 in Cancer Patients' inclusion_criteria='Healthy volunteers allowed\nMust have minimum age of 18 Years' exclusion_criteria='' miscellaneous_criteria='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease\n\nPATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies\n\nPRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified'
2025-03-10 11:08:25 - src.services.identifier - INFO - Starting identification of criteria for trial NCT ID: NCT00003082
2025-03-10 11:08:25 - src.services.identifier - DEBUG - Processing line 1: Healthy volunteers allowed
2025-03-10 11:08:25 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Healthy volunteers allowed
2025-03-10 11:08:25 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Healthy volunteers allowed'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:08:25 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:25 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=45 socket_options=None
2025-03-10 11:08:25 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6E79940>
2025-03-10 11:08:25 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x00000299A686ACC0> server_hostname='api.openai.com' timeout=45
2025-03-10 11:08:25 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6E90410>
2025-03-10 11:08:25 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:25 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:25 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:25 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:25 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:08:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1208'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449850'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'19ms'), (b'x-request-id', b'req_d424533d81f7c515e4eee18024b643e3'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=X83iDoEksG7rdJNOsfcmwSeXsv43eAGMk1c021n2._0-1741619309-1.0.1.1-JZrCZP3.moeoRHl8ErpKqsUQg4OXBZPMLtnAhlnZ11FDkldUNFwVfqeIptuTBYguDKBqoXmGRkaObwq0nEI8LCrLgb4JRLkA1OZs4FM7miE; path=/; expires=Mon, 10-Mar-25 15:38:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=JTqDMul.AulS1tVDZdIQqI42aCPf7b3qB8_21TddFo0-1741619309306-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3ba4309824c1f-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:27 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:27 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 10 Mar 2025 15:08:29 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'eschrichlab'), ('openai-processing-ms', '1208'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '450000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '449850'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '19ms'), ('x-request-id', 'req_d424533d81f7c515e4eee18024b643e3'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=X83iDoEksG7rdJNOsfcmwSeXsv43eAGMk1c021n2._0-1741619309-1.0.1.1-JZrCZP3.moeoRHl8ErpKqsUQg4OXBZPMLtnAhlnZ11FDkldUNFwVfqeIptuTBYguDKBqoXmGRkaObwq0nEI8LCrLgb4JRLkA1OZs4FM7miE; path=/; expires=Mon, 10-Mar-25 15:38:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=JTqDMul.AulS1tVDZdIQqI42aCPf7b3qB8_21TddFo0-1741619309306-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '91e3ba4309824c1f-MIA'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-03-10 11:08:27 - openai._base_client - DEBUG - request_id: req_d424533d81f7c515e4eee18024b643e3
2025-03-10 11:08:27 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Healthy volunteers allowed
2025-03-10 11:08:27 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:08:27 - src.services.identifier - DEBUG - Processing line 2: Must have minimum age of 18 Years
2025-03-10 11:08:27 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Must have minimum age of 18 Years
2025-03-10 11:08:27 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Must have minimum age of 18 Years'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:08:27 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:27 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:08:30 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1251'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449849'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'20ms'), (b'x-request-id', b'req_30d6417f6192d985e379293476f96e01'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3ba4b9e1d4c1f-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:28 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:28 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:08:30 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1251', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449849', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '20ms', 'x-request-id': 'req_30d6417f6192d985e379293476f96e01', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3ba4b9e1d4c1f-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:08:28 - openai._base_client - DEBUG - request_id: req_30d6417f6192d985e379293476f96e01
2025-03-10 11:08:28 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Must have minimum age of 18 Years
2025-03-10 11:08:28 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:08:28 - src.services.identifier - DEBUG - Processing line 1: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 11:08:28 - src.services.identifier - DEBUG - Extracting atomic criteria from line: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 11:08:28 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A63F7F60>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:08:28 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:28 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:08:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'3383'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449804'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'26ms'), (b'x-request-id', b'req_f855d39e9db50efed7eeb82028b7b012'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3ba54394e4c1f-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:32 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:32 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:08:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '3383', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449804', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '26ms', 'x-request-id': 'req_f855d39e9db50efed7eeb82028b7b012', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3ba54394e4c1f-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:08:32 - openai._base_client - DEBUG - request_id: req_f855d39e9db50efed7eeb82028b7b012
2025-03-10 11:08:32 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease
2025-03-10 11:08:32 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:08:32 - src.services.identifier - DEBUG - Processing line 2: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 11:08:32 - src.services.identifier - DEBUG - Extracting atomic criteria from line: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 11:08:32 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A64200E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:08:32 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:32 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:08:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'16547'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449635'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'48ms'), (b'x-request-id', b'req_a03f18e8acbb1155ac3552b42dbdae3c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3ba6a4e2f4c1f-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:48 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:48 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:08:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '16547', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449635', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '48ms', 'x-request-id': 'req_a03f18e8acbb1155ac3552b42dbdae3c', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3ba6a4e2f4c1f-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:08:48 - openai._base_client - DEBUG - request_id: req_a03f18e8acbb1155ac3552b42dbdae3c
2025-03-10 11:08:48 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies
2025-03-10 11:08:48 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:08:48 - src.services.identifier - DEBUG - Processing line 3: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 11:08:48 - src.services.identifier - DEBUG - Extracting atomic criteria from line: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 11:08:48 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A64200E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:08:48 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:48 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:08:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'8306'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449733'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'35ms'), (b'x-request-id', b'req_1e697c3dd2037133d1ad539e4051348b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bad2ab764c1f-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:57 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:57 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:08:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '8306', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449733', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '35ms', 'x-request-id': 'req_1e697c3dd2037133d1ad539e4051348b', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bad2ab764c1f-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:08:57 - openai._base_client - DEBUG - request_id: req_1e697c3dd2037133d1ad539e4051348b
2025-03-10 11:08:57 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified
2025-03-10 11:08:57 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:08:57 - src.services.identifier - INFO - Successfully identified criteria for trial NCT ID: NCT00003082
2025-03-10 11:08:57 - src.repositories.trial_repository - INFO - Model saved successfully at C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\output\allTrials\identified\NCT00003082_identified.json
2025-03-10 11:08:57 - src.services.logical_structurizer - INFO - Starting logical structurizing for trial NCT ID: NCT00003082
2025-03-10 11:08:57 - src.services.logical_structurizer - DEBUG - Processing 2 inclusion criteria lines
2025-03-10 11:08:57 - src.services.logical_structurizer - DEBUG - Structurizing line: line='Healthy volunteers allowed' criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 11:08:57 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:57 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-03-10 11:08:57 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6E90E10>
2025-03-10 11:08:57 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x00000299A686A720> server_hostname='api.openai.com' timeout=60
2025-03-10 11:08:57 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6DA36F0>
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:57 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:01 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1328'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449837'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'21ms'), (b'x-request-id', b'req_525ab14c71eb056b3521cc1b3ad70621'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=y719Ak2r6nPBBnju_HOs9PFIbkyd55gPSjFV_0_K1zs-1741619341-1.0.1.1-DIomP4DaIoRgimz8I57G9e.oqdI9HSd_TtDGfkMfPoUZujK6z0ast3SSY_TovwluDYx4Ro70L6D1K4LNH.srAVg6jc1ukS8igeEEFt6Ni_g; path=/; expires=Mon, 10-Mar-25 15:39:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=rtTMwtl7yCQZAPlv_Q0m0TV3yjSy881CRiDQVhNtvV8-1741619341091-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bb08ecec55f7-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:08:58 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:08:58 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Mon, 10 Mar 2025 15:09:01 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'eschrichlab'), ('openai-processing-ms', '1328'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '5000'), ('x-ratelimit-limit-tokens', '450000'), ('x-ratelimit-remaining-requests', '4999'), ('x-ratelimit-remaining-tokens', '449837'), ('x-ratelimit-reset-requests', '12ms'), ('x-ratelimit-reset-tokens', '21ms'), ('x-request-id', 'req_525ab14c71eb056b3521cc1b3ad70621'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=y719Ak2r6nPBBnju_HOs9PFIbkyd55gPSjFV_0_K1zs-1741619341-1.0.1.1-DIomP4DaIoRgimz8I57G9e.oqdI9HSd_TtDGfkMfPoUZujK6z0ast3SSY_TovwluDYx4Ro70L6D1K4LNH.srAVg6jc1ukS8igeEEFt6Ni_g; path=/; expires=Mon, 10-Mar-25 15:39:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=rtTMwtl7yCQZAPlv_Q0m0TV3yjSy881CRiDQVhNtvV8-1741619341091-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '91e3bb08ecec55f7-MIA'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-03-10 11:08:58 - openai._base_client - DEBUG - request_id: req_525ab14c71eb056b3521cc1b3ad70621
2025-03-10 11:08:58 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='Healthy volunteers allowed' criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 11:08:58 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))])
2025-03-10 11:08:58 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='Healthy volunteers allowed', criterions=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]) logical_structure=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))])
2025-03-10 11:08:58 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 11:08:58 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='Healthy volunteers allowed', criterion='volunteer health status', requirement=Requirement(requirement_type='status', expected_value='healthy'))]
2025-03-10 11:08:58 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 11:08:58 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 11:08:58 - src.services.logical_structurizer - DEBUG - Structurizing line: line='Must have minimum age of 18 Years' criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 11:08:58 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:08:58 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1399'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'448939'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'141ms'), (b'x-request-id', b'req_9f3b4a5bcec851d06fe5f25a251251e5'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bb122bfc55f7-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:00 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:00 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1399', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '448939', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '141ms', 'x-request-id': 'req_9f3b4a5bcec851d06fe5f25a251251e5', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bb122bfc55f7-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:00 - openai._base_client - DEBUG - request_id: req_9f3b4a5bcec851d06fe5f25a251251e5
2025-03-10 11:09:00 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='Must have minimum age of 18 Years' criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 11:09:00 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))])
2025-03-10 11:09:00 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='Must have minimum age of 18 Years', criterions=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]) logical_structure=LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))])
2025-03-10 11:09:00 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 11:09:00 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='minimum age of 18 Years', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='Years')))]
2025-03-10 11:09:00 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 11:09:00 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 11:09:00 - src.services.logical_structurizer - DEBUG - Processing 0 exclusion criteria lines
2025-03-10 11:09:00 - src.services.logical_structurizer - DEBUG - Processing 3 miscellaneous criteria lines
2025-03-10 11:09:00 - src.services.logical_structurizer - DEBUG - Structurizing line: line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease' criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False)), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))]
2025-03-10 11:09:00 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:00 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'4795'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'448651'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'179ms'), (b'x-request-id', b'req_2a8ff00aba11ca1f32ef26e402754f33'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bb1bffcb55f7-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:05 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:05 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '4795', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '448651', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '179ms', 'x-request-id': 'req_2a8ff00aba11ca1f32ef26e402754f33', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bb1bffcb55f7-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:05 - openai._base_client - DEBUG - request_id: req_2a8ff00aba11ca1f32ef26e402754f33
2025-03-10 11:09:05 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease' criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False)), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))]
2025-03-10 11:09:05 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed'))]), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False))]), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))])
2025-03-10 11:09:05 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='DISEASE CHARACTERISTICS: Refractory or recurrent advanced malignancy following known standard effective therapy or advanced malignancy for which no standard effective therapy exists Measurable or evaluable disease', criterions=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False)), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))]) logical_structure=LLMLogicalAnd(and_criteria=[LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed'))]), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False))]), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))])
2025-03-10 11:09:05 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False)), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))]
2025-03-10 11:09:05 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='Refractory or recurrent advanced malignancy', criterion='advanced malignancy', requirement=Requirement(requirement_type='status', expected_value=['refractory', 'recurrent'])), SingleRequirementCriterion(exact_snippets='following known standard effective therapy', criterion='standard effective therapy', requirement=Requirement(requirement_type='status', expected_value='completed')), SingleRequirementCriterion(exact_snippets='advanced malignancy for which no standard effective therapy exists', criterion='advanced malignancy', requirement=Requirement(requirement_type='standard therapy availability', expected_value=False)), SingleRequirementCriterion(exact_snippets='Measurable or evaluable disease', criterion='disease measurability', requirement=Requirement(requirement_type='status', expected_value=['measurable', 'evaluable']))]
2025-03-10 11:09:05 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 11:09:05 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 11:09:05 - src.services.logical_structurizer - DEBUG - Structurizing line: line='PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies' criterions=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]
2025-03-10 11:09:05 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:05 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:33 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'25154'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'447649'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'313ms'), (b'x-request-id', b'req_0e7bb6445fc3a04cd2817a06aa9d4c46'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bb3bc80655f7-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:30 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:30 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:33 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '25154', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '447649', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '313ms', 'x-request-id': 'req_0e7bb6445fc3a04cd2817a06aa9d4c46', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bb3bc80655f7-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:30 - openai._base_client - DEBUG - request_id: req_0e7bb6445fc3a04cd2817a06aa9d4c46
2025-03-10 11:09:30 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies' criterions=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]
2025-03-10 11:09:30 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3')))]), LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal')))])]), LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN')))])]), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))])
2025-03-10 11:09:30 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='PATIENT CHARACTERISTICS: Age: 18 and over Performance status: SWOG 0-2 Life expectancy: At least 2 months Hematopoietic: Absolute neutrophil count at least 1800/mm3 Hematocrit at least 30 mg/dL Platelet count at least 50,000/mm3 Hepatic: Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases) Renal: Creatinine no greater than 2.5 times normal Cardiovascular: No severe cardiac abnormalities Must have adequate venous access No history of sustained ventricular arrhythmia or unexplained syncope Pulmonary: No severe pulmonary abnormalities Other: Not pregnant or nursing Effective contraception required of fertile female patients No serious concurrent medical or psychiatric illness Adequate nutrition No human antimouse antibodies', criterions=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]) logical_structure=LLMLogicalAnd(and_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3')))]), LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal')))])]), LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN')))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN')))])]), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))])
2025-03-10 11:09:30 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]
2025-03-10 11:09:30 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='Age: 18 and over', criterion='age', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=18, unit='years'))), SingleRequirementCriterion(exact_snippets='Performance status: SWOG 0-2', criterion='performance status', requirement=Requirement(requirement_type='scale', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2, unit='SWOG'))), SingleRequirementCriterion(exact_snippets='Life expectancy: At least 2 months', criterion='life expectancy', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='months'))), SingleRequirementCriterion(exact_snippets='Absolute neutrophil count at least 1800/mm3', criterion='absolute neutrophil count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=1800, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Hematocrit at least 30 mg/dL', criterion='hematocrit', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=30, unit='mg/dL'))), SingleRequirementCriterion(exact_snippets='Platelet count at least 50,000/mm3', criterion='platelet count', requirement=Requirement(requirement_type='minimum', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=50000, unit='mm3'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=1.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Bilirubin no greater than 1.5 times normal unless due to disease, then less than 3.5 times normal', criterion='bilirubin', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=3, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Transaminases less than 3 times upper limit of normal (ULN) (less than 5 times ULN if due to liver metastases)', criterion='transaminases', requirement=Requirement(requirement_type='conditional maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN: '<'>, value=5, unit='times ULN'))), SingleRequirementCriterion(exact_snippets='Creatinine no greater than 2.5 times normal', criterion='creatinine', requirement=Requirement(requirement_type='maximum', expected_value=LLMNumericalComparison(operator=<LLMOperator.LESS_THAN_OR_EQUAL_TO: '<='>, value=2.5, unit='times normal'))), SingleRequirementCriterion(exact_snippets='No severe cardiac abnormalities', criterion='cardiac abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Must have adequate venous access', criterion='venous access', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No history of sustained ventricular arrhythmia or unexplained syncope', criterion='history of sustained ventricular arrhythmia or unexplained syncope', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No severe pulmonary abnormalities', criterion='pulmonary abnormalities', requirement=Requirement(requirement_type='severity', expected_value=False)), SingleRequirementCriterion(exact_snippets='Not pregnant or nursing', criterion='pregnancy or nursing', requirement=Requirement(requirement_type='status', expected_value=False)), SingleRequirementCriterion(exact_snippets='Effective contraception required of fertile female patients', criterion='contraception', requirement=Requirement(requirement_type='requirement', expected_value=True)), SingleRequirementCriterion(exact_snippets='No serious concurrent medical or psychiatric illness', criterion='serious concurrent medical or psychiatric illness', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Adequate nutrition', criterion='nutrition', requirement=Requirement(requirement_type='adequacy', expected_value=True)), SingleRequirementCriterion(exact_snippets='No human antimouse antibodies', criterion='human antimouse antibodies', requirement=Requirement(requirement_type='presence', expected_value=False))]
2025-03-10 11:09:30 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 11:09:30 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 11:09:30 - src.services.logical_structurizer - DEBUG - Structurizing line: line='PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified' criterions=[SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))]
2025-03-10 11:09:30 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:30 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:44 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:47 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'13794'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'447715'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'304ms'), (b'x-request-id', b'req_ed7c9a78590468a0a3c16afcf6f69a65'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bbda2ed455f7-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:44 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:44 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:44 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:44 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:44 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:44 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:47 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '13794', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '447715', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '304ms', 'x-request-id': 'req_ed7c9a78590468a0a3c16afcf6f69a65', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bbda2ed455f7-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:44 - openai._base_client - DEBUG - request_id: req_ed7c9a78590468a0a3c16afcf6f69a65
2025-03-10 11:09:44 - src.services.logical_structurizer - DEBUG - Successfully structured line logically: line='PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified' criterions=[SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))]
2025-03-10 11:09:44 - src.services.logical_structurizer - DEBUG - LLM response: logicalRepresentation=LLMLogicalAnd(and_criteria=[LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True))])]), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))])
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - Verifying criteria presence for line: identified_line=IdentifiedUnrolledLine(line='PRIOR CONCURRENT THERAPY: At least 4 weeks since prior anticancer therapy and recovered If there was disease progression during therapy, at least 2 weeks since prior anticancer therapy and recovered Biologic therapy: Not specified Chemotherapy: No concurrent chemotherapy Endocrine therapy: Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed No other concurrent hormone therapy Radiotherapy: No concurrent palliative radiotherapy Surgery: Not specified', criterions=[SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))]) logical_structure=LLMLogicalAnd(and_criteria=[LLMLogicalOr(or_criteria=[LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True))]), LLMLogicalAnd(and_criteria=[SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True))])]), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))])
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - Identified criteria: [SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))]
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - Logical criteria: [SingleRequirementCriterion(exact_snippets='At least 4 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=4, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='disease progression during therapy, at least 2 weeks since prior anticancer therapy', criterion='time since prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='time since', expected_value=LLMNumericalComparison(operator=<LLMOperator.GREATER_THAN_OR_EQUAL_TO: '>='>, value=2, unit='weeks'))), SingleRequirementCriterion(exact_snippets='recovered', criterion='recovery from prior anticancer therapy after disease progression', requirement=Requirement(requirement_type='recovery status', expected_value=True)), SingleRequirementCriterion(exact_snippets='Biologic therapy: Not specified', criterion='biologic therapy', requirement=Requirement(requirement_type='specification', expected_value='Not specified')), SingleRequirementCriterion(exact_snippets='No concurrent chemotherapy', criterion='concurrent chemotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Concurrent topical steroids used in the chronic management of cutaneous T cell lymphoma allowed', criterion='concurrent topical steroids for cutaneous T cell lymphoma', requirement=Requirement(requirement_type='allowance', expected_value=True)), SingleRequirementCriterion(exact_snippets='No other concurrent hormone therapy', criterion='concurrent hormone therapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='No concurrent palliative radiotherapy', criterion='concurrent palliative radiotherapy', requirement=Requirement(requirement_type='presence', expected_value=False)), SingleRequirementCriterion(exact_snippets='Surgery: Not specified', criterion='surgery', requirement=Requirement(requirement_type='specification', expected_value='Not specified'))]
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - Checking for missing criteria...
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - All criteria present in logical structure.
2025-03-10 11:09:44 - src.services.logical_structurizer - INFO - Completed logical structurizing for trial NCT ID: NCT00003082
2025-03-10 11:09:44 - src.repositories.trial_repository - INFO - Model saved successfully at C:\Users\wasab\Documents\code\python\Clinical-Trial-Prompts\output\allTrials\logical\NCT00003082_logical.json
2025-03-10 11:09:44 - src.services.trial_manager - INFO - Trial processing complete for NCT ID: NCT00003082
2025-03-10 11:09:44 - __main__ - INFO - Successfully processed trial NCT00003082
2025-03-10 11:09:44 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1&pageToken=NF0g5JKP
2025-03-10 11:09:44 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 11:09:45 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies?query.cond=cancer&query.term=cancer&query.titles=Cancer&fields=NCTId&pageSize=1&pageToken=NF0g5JKP HTTP/11" 200 None
2025-03-10 11:09:45 - src.utils.helpers - INFO - Request successful.
2025-03-10 11:09:45 - __main__ - INFO - Processing trial 2: NCT ID NCT00301782
2025-03-10 11:09:45 - src.services.trial_manager - INFO - Starting processing for trial NCT ID: NCT00301782
2025-03-10 11:09:45 - src.services.trial_manager - INFO - Fetching trial data for NCT ID: NCT00301782
2025-03-10 11:09:45 - src.utils.helpers - INFO - Sending GET request to URL: https://clinicaltrials.gov/api/v2/studies/NCT00301782?fields=NCTId,OfficialTitle,EligibilityModule
2025-03-10 11:09:45 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): clinicaltrials.gov:443
2025-03-10 11:09:45 - urllib3.connectionpool - DEBUG - https://clinicaltrials.gov:443 "GET /api/v2/studies/NCT00301782?fields=NCTId,OfficialTitle,EligibilityModule HTTP/11" 200 None
2025-03-10 11:09:45 - src.utils.helpers - INFO - Request successful.
2025-03-10 11:09:45 - src.services.trial_manager - INFO - Successfully retrieved trial data.
2025-03-10 11:09:45 - src.services.identifier - INFO - Starting identification of criteria for trial NCT ID: NCT00301782
2025-03-10 11:09:45 - src.services.identifier - DEBUG - Processing line 1: Healthy volunteers allowed
2025-03-10 11:09:45 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Healthy volunteers allowed
2025-03-10 11:09:45 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A63F7F60>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Healthy volunteers allowed'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:45 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:45 - httpcore.connection - DEBUG - close.started
2025-03-10 11:09:45 - httpcore.connection - DEBUG - close.complete
2025-03-10 11:09:45 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=45 socket_options=None
2025-03-10 11:09:45 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6DA3BB0>
2025-03-10 11:09:45 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x00000299A686ACC0> server_hostname='api.openai.com' timeout=45
2025-03-10 11:09:45 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000299A6E37530>
2025-03-10 11:09:45 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:45 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:45 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:45 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:45 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:49 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1440'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449850'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'19ms'), (b'x-request-id', b'req_44e75e58210ff7cdff870da83f144c0e'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bc346b0b6c87-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:46 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:46 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:49 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1440', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449850', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '19ms', 'x-request-id': 'req_44e75e58210ff7cdff870da83f144c0e', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bc346b0b6c87-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:46 - openai._base_client - DEBUG - request_id: req_44e75e58210ff7cdff870da83f144c0e
2025-03-10 11:09:46 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Healthy volunteers allowed
2025-03-10 11:09:46 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:09:46 - src.services.identifier - DEBUG - Processing line 2: Must be MALE
2025-03-10 11:09:46 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Must be MALE
2025-03-10 11:09:46 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Must be MALE'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:46 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:46 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1348'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449827'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'23ms'), (b'x-request-id', b'req_c1ead7951343a612790fb02e5227a586'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bc3e5a726c87-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:48 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:48 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1348', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449827', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '23ms', 'x-request-id': 'req_c1ead7951343a612790fb02e5227a586', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bc3e5a726c87-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:48 - openai._base_client - DEBUG - request_id: req_c1ead7951343a612790fb02e5227a586
2025-03-10 11:09:48 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Must be MALE
2025-03-10 11:09:48 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:09:48 - src.services.identifier - DEBUG - Processing line 3: Must have minimum age of 16 Years
2025-03-10 11:09:48 - src.services.identifier - DEBUG - Extracting atomic criteria from line: Must have minimum age of 16 Years
2025-03-10 11:09:48 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'Must have minimum age of 16 Years'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:48 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:48 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1615'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449719'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'37ms'), (b'x-request-id', b'req_7525f7d159939fdc0b93210f52c28de6'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bc479f996c87-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:50 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:50 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1615', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449719', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '37ms', 'x-request-id': 'req_7525f7d159939fdc0b93210f52c28de6', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bc479f996c87-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:50 - openai._base_client - DEBUG - request_id: req_7525f7d159939fdc0b93210f52c28de6
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: Must have minimum age of 16 Years
2025-03-10 11:09:50 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Processing line 1: DISEASE CHARACTERISTICS:
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Extracting atomic criteria from line: DISEASE CHARACTERISTICS:
2025-03-10 11:09:50 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': 'DISEASE CHARACTERISTICS:'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:50 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:52 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'445'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449851'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'19ms'), (b'x-request-id', b'req_cc4a7f78905fcb2e8a4e775f7d51101c'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bc526a2e6c87-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:50 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:50 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:52 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '445', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449851', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '19ms', 'x-request-id': 'req_cc4a7f78905fcb2e8a4e775f7d51101c', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bc526a2e6c87-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:50 - openai._base_client - DEBUG - request_id: req_cc4a7f78905fcb2e8a4e775f7d51101c
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: DISEASE CHARACTERISTICS:
2025-03-10 11:09:50 - src.services.identifier - WARNING - Failed to extract criteria from line 1.
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Processing line 2: * Nonseminoma germ cell tumor of any extracranial primary site diagnosed by 1 of the following methods:
2025-03-10 11:09:50 - src.services.identifier - DEBUG - Extracting atomic criteria from line: * Nonseminoma germ cell tumor of any extracranial primary site diagnosed by 1 of the following methods:
2025-03-10 11:09:50 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': '* Nonseminoma germ cell tumor of any extracranial primary site diagnosed by 1 of the following methods:'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:50 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:50 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 10 Mar 2025 15:09:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'eschrichlab'), (b'openai-processing-ms', b'1838'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'5000'), (b'x-ratelimit-limit-tokens', b'450000'), (b'x-ratelimit-remaining-requests', b'4999'), (b'x-ratelimit-remaining-tokens', b'449817'), (b'x-ratelimit-reset-requests', b'12ms'), (b'x-ratelimit-reset-tokens', b'24ms'), (b'x-request-id', b'req_f14d637beff1253cb54ac1c2fab9fe88'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'91e3bc56393c6c87-MIA'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-03-10 11:09:52 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - response_closed.started
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-10 11:09:52 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Mon, 10 Mar 2025 15:09:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'eschrichlab', 'openai-processing-ms': '1838', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '5000', 'x-ratelimit-limit-tokens': '450000', 'x-ratelimit-remaining-requests': '4999', 'x-ratelimit-remaining-tokens': '449817', 'x-ratelimit-reset-requests': '12ms', 'x-ratelimit-reset-tokens': '24ms', 'x-request-id': 'req_f14d637beff1253cb54ac1c2fab9fe88', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '91e3bc56393c6c87-MIA', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2025-03-10 11:09:52 - openai._base_client - DEBUG - request_id: req_f14d637beff1253cb54ac1c2fab9fe88
2025-03-10 11:09:52 - src.services.identifier - DEBUG - Successfully extracted atomic criteria from line: * Nonseminoma germ cell tumor of any extracranial primary site diagnosed by 1 of the following methods:
2025-03-10 11:09:52 - src.services.identifier - INFO - Verifying criteria snippets.
2025-03-10 11:09:52 - src.services.identifier - DEBUG - Processing line 3: * Histologic confirmation
2025-03-10 11:09:52 - src.services.identifier - DEBUG - Extracting atomic criteria from line: * Histologic confirmation
2025-03-10 11:09:52 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'timeout': 45, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x00000299A6E76660>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an expert in clinical trial eligibility criteria.Given the following line from an Oncological Clinical Trial Eligibility Criteria, extract every individual criterion they are testing the patient for.In other words, what are the specific properties/attributes/conditions that are being tested for in the patient?For each criterion, provide the exact snippets from the line that you used to identify it.Should your exact snippets be non-contiguous then provide multiple short exact snippets'}, {'role': 'user', 'content': '* Histologic confirmation'}], 'model': 'gpt-4o', 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'$defs': {'LLMMultiRequirementCriterion': {'description': 'Represents an atomic criterion extracted from the eligibility criteria.\nThis model captures the general property/attribute being tested and a list of requirements with their expected values.\n\nexample:\n    input:\n    "Tissue from tumor must be available and > 2 cm in diameter.",\n            \n    output:\n    "exact_snippets": "Tissue from tumor must be available ... > 2 cm in diameter.",\n    "criterion": "tumor tissue",\n    "requirements": [\n        {\n            "requirement_type": "availability",\n            "expected_value": true\n        },\n        {\n            "requirement_type": "size",\n            "expected_value": {\n                "operator": ">",\n                "value": 2,\n                "unit": "cm"\n            }\n        }\n    ]', 'properties': {'exact_snippets': {'description': 'Exact text snippets from the eligibility criteria that were used to extract this criterion, using ellipses (...) for non-consecutive text.', 'title': 'Exact Snippets', 'type': 'string'}, 'criterion': {'description': "The specific property, attribute, or condition that is being tested (e.g., 'age', 'lung cancer', 'BMI').", 'title': 'Criterion', 'type': 'string'}, 'requirements': {'description': 'List of requirements and their expected values for the criterion.', 'items': {'$ref': '#/$defs/Requirement'}, 'title': 'Requirements', 'type': 'array'}}, 'required': ['exact_snippets', 'criterion', 'requirements'], 'title': 'LLMMultiRequirementCriterion', 'type': 'object', 'additionalProperties': False}, 'LLMNumericalComparison': {'description': 'Represents a numerical comparison operation for an expected value.', 'properties': {'operator': {'description': 'The comparison operator.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'value': {'anyOf': [{'type': 'integer'}, {'type': 'number'}], 'description': 'The value to compare against.', 'title': 'Value'}, 'unit': {'description': 'The unit of the value being compared, if applicable, N/A otherwise.', 'title': 'Unit', 'type': 'string'}}, 'required': ['operator', 'value', 'unit'], 'title': 'LLMNumericalComparison', 'type': 'object', 'additionalProperties': False}, 'LLMOperator': {'description': 'Represents an operator to be used in NumericalComparisons.', 'enum': ['>', '<', '=', '!=', '>=', '<='], 'title': 'LLMOperator', 'type': 'string'}, 'LLMRange': {'description': 'Represents a range via multiple NumericalComparison objects to be used in expected value.', 'properties': {'comparisons': {'description': 'List of comparison operations defining the range.', 'items': {'$ref': '#/$defs/LLMNumericalComparison'}, 'title': 'Comparisons', 'type': 'array'}}, 'required': ['comparisons'], 'title': 'LLMRange', 'type': 'object', 'additionalProperties': False}, 'Requirement': {'description': 'Represents a requirement type and its expected value for a criterion.', 'properties': {'requirement_type': {'description': "What about the criterion is being tested (e.g presence, severity, quantity, N/A if it doesn't make sense for the criterion to have an attribute (eg. age)).", 'title': 'Requirement Type', 'type': 'string'}, 'expected_value': {'anyOf': [{'type': 'boolean'}, {'type': 'string'}, {'items': {'type': 'string'}, 'type': 'array'}, {'$ref': '#/$defs/LLMNumericalComparison'}, {'$ref': '#/$defs/LLMRange'}], 'description': 'The expected value for the requirement. Only use string if nothing else is applicable.', 'title': 'Expected Value'}}, 'required': ['requirement_type', 'expected_value'], 'title': 'Requirement', 'type': 'object', 'additionalProperties': False}}, 'description': 'Represents the collection of all structured atomic criteria and leftovers.', 'properties': {'atomic_criteria': {'description': 'List of all atomic criteria extracted from the trial.', 'items': {'$ref': '#/$defs/LLMMultiRequirementCriterion'}, 'title': 'Atomic Criteria', 'type': 'array'}}, 'required': ['atomic_criteria'], 'title': 'LLMIdentifiedLineResponse', 'type': 'object', 'additionalProperties': False}, 'name': 'LLMIdentifiedLineResponse', 'strict': True}}, 'stream': False, 'temperature': 0.0}}
2025-03-10 11:09:52 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-10 11:09:52 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
