you are no longer a chatbot. You are an nlp algorithm with recursively subdivides a text until it reaches its atomic sections. When you are called you will be given some text, you are to remove one layer of subgroups. (I am trying to get the ai to return me a list of only the top layer of subgroups, for example if I have a or (b and c) then it should return a,(b and c) without actually seperating (b and c) yet)



IDEA
have the "atomic groups" be like conditions with modifiers, often times you can't subdivide further without removing clarity, for example

Patients with biopsy-proven metastatic carcinoid tumors or other neuroendocrine tumors (Islet cell, Gastrinomas, and VIPomas) with at least one measurable lesion (other than bone) that has either not been previously irradiated or if previously irradiated has demonstrated progression since the radiation therapy.

{"condition" : biopsy-proven metastatic carcinoid tumor", "modifiers" : [{"condition" : number of measurable lesions", "expression" : "{number of measurable lesions} >= 1", "modifiers" : [{"condition" : "previously irradiated", "options" : ["yes", "no"], "True options" : [{"answer" : "no"}, {"answer" : "yes", "modifiers" : ["condition" : "progression since radiation therapy", "options" : ["yes", "no"], "True options" : [{"answer" : "yes"}]]}]}]}]}

This clearly has some boolean algebra within it, however one could consider it to be atomic since you can not ask wether it has at least one measurable lesion... without knowing which tumor you are talking about. before it was considered as atomic with different topics but what if we now have it as some atomic text cannot be further subdivided without losing readability and it can have multiple "conditions" with "modifiers or additional information needed" similar to the other guy's more structured near sql format and similar to chias marked version. This allows you to first see which conditions/topics you have and then further specify additional needed information about each condition to fully see if a trial is applicable or not. This allows you to first ask which conditions you have, then specify which modifiers apply. We can ask the modifiers last as they are very specific to trials and would be like the last filter. These modifiers may also have their own modifiers, allowing it to be better nested and more structured.


we should have the topics/conditions also have a list of possible answers, like for example "sex" : ["female", "male"] and then a list of answers that would be true. for numerical answers we will have it pass trough an expression which evaluates to true or false, for example (ans >= 18). This would allow us to not have to do an llm call once we get the answer but instead force the llm which retrieves information to parse the user or DB's answer into one of the provided available answers and then via code evaluate it's truth value

foreseeing possible problem with nots, for example if it says not male it might use the logical operator not while also having the true option being female, this would be wrong. it should either use the logical operator not with true being male or not use the logical operator and have true be female

atomic has basically become the point at which it is one condition which may have modifiers. the algebra then becomes condition and modifiers, where modifiers has to first become a list of all the modifiers with their possible and correct answers, then translated into its own sub boolean algebra expression, then all the conditions get put together in their boolean algebra. 

need to check how many possible conditions there actually are because it may be too many to assimilate via llm

In order to Synonymize the conditions/modifiers we will do so in the asking process to the user. we will recursively ask the AI to look at the list of conditions and modifiers and see if it can group them together in a way that one question will get the value for multiple conditions/modifiers. This will allow us to have a more human like conversation with the AI and allow us to get the information we need in a more efficient manner. while also being able to avoid having to merge {"condition" : "ecog status", "options" : ["fully active", "restricted", "ambulatory", "self care", "disabled", "dead"]} with {"condition" : "ecog level", "options" : ["0", "1", "2", "3", "4", "5"]} into one condition with multiple options. As you can see this not only has slightly different names for ecog but it also has different interpretations of the options. This will allow us to have a more human like conversation with the AI and allow us to get the information we need in a more efficient manner.


sometimes a condition can have an or in it, like the carcinoid tumor or other neuroendocrine tumors. as long as you have one of these, you have modifiers for it. so should each one just have identical modifiers or should they be OR'd together and then put modifiers on that or?

problem with the above is that if we have (a or b) then modifiers for both it could stop once it knows it has A since true or false is true, then the modifiers make it false, even though b could've been true and its modifiers would've made it true. Can be fixed by always expanding expressions needs to be done by llm since llm will be able to tell wether its a list where any of them needs the modifiers or just one of them, should add new operator to specify list which will or them together while allowing the modifier to apply to all?

when getting information, will implement an assume with a reliability factor. for example it asks about a small clinical dementia rating but they've never been formally rated but know they don't have dementia, then we can assume with x certainty that it is true, allowing it to be more approximate and less definite.







UPDATE:
def subdivide():
    make an ai call which will attempt to subdivide the text into atomic subparts connected by logical operators.
    response would be enum of operator and then list of atomic subdivisions or saying that it can't be subdivided further
    if it was subdivided then call subdivide on each of the atomic subdivisions
    if it can't be subdivided further then 

def identifyAtomicParts(text):
    let x be {"condition" : condition, "modifiers" : all text that is not the condition}


1. ai will see if text can be seperated without losing context, if it can then it will return a list of seperate texts and call step 1 again on each of them. if it can't then proceed to step 2

Once we get to an atomic level we will have another AI seperate the text into condition and a list of modifiers. note that this list will be top level only.

Said condition may be able to be seperated further so we 

